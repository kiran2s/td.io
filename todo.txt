- Review code
	- Make all GameObjects in shared abstract or use them for creating updates at the server.
	- gameState updates should be in correct order
	- possibly eliminate having to iterate through all input updates since last gameStateUpdate
	- get rid of awful variable name "adjustedBulletVelocity"
- Correct deltaTime functionality
	- server calculates deltaTime for each inputUpdate
	- client sends server deltaTime
- Improve performance
	- better data structure for holding updates
	- entity interpolation
		- compare performance with and without
		- interpolate in physics update loop?
			- maybe only half the time?
		- maybe replace interpolation with server sending more gamestates
	- avoid floating point coordinates
	- pre-render if possible

- Player should be slightly offset from center of canvas depending on movement
- Client prediction for bullets
	- Move bullets to Weapon class

- Allow more than 1 Client to connect
	- Player/bullet collisions
- Base
- Minimap
- Inventory
- Player Attributes
- Leaderboard
- Indicator if base being attacked

- Add comments

-----------------------------------------------------------------------
Bugs:
- setTranform affects clearing canvas

-----------------------------------------------------------------------

Performance:
100 update loops
100 collectibles

no spatial hash:
	baseline: 0-3ms
	peak:     110ms
	stream:   30-50ms
	
spatial hash:
	baseline: 0-6ms (20-30ms when moving mouse around)
	peak:     55ms
	stream:   10-35ms
- performance hit due to having to update hash objects
	- amplifies when moving cursor around for some reason

----------------------------------------------------------------------

Ideas:
- Press space for a dash (reduces health)

----------------------------------------------------------------------

- d3-quadtree:
var d3 = require("d3-quadtree");
let data = [{ x: 1, y: 2, mask: 0 }, { x: 3, y: 4, mask: 0 }, { x: 3, y: 3, mask: 1 }];
let tree = d3.quadtree()
    .x(function(d) { return d.x; })
    .y(function(d) { return d.y; })
    .addAll(data);
tree.x(function(d) { if (d.mask === 0) return d.x; })
    .y(function(d) { if (d.mask === 0) return d.y; });
let point = tree.find(3, 3, 3);
console.log(point);
